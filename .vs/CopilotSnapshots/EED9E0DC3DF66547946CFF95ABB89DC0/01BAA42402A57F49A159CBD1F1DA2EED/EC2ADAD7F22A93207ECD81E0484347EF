using System;
using System.Media;
using System.Net.Http;
using System.Text.Json;
using System.Windows.Forms;

namespace ServiceCheck
{
    public partial class Form1 : Form
    {
        private bool isMonitoring = false;
        private Timer monitorTimer;
        private HttpClient httpClient;
        private SoundPlayer alertSound;

        public Form1()
        {
            InitializeComponent();
            
            // 初始化组件
            InitializeCustomComponents();
        }

        private void InitializeCustomComponents()
        {
            // 初始化HTTP客户端
            httpClient = new HttpClient();
            
            // 初始化提示音
            alertSound = new SoundPlayer(Properties.Resources.alert); // 需要添加音频资源
            
            // 初始化定时器，5秒检查一次
            monitorTimer = new Timer();
            monitorTimer.Interval = 5000; // 5秒
            monitorTimer.Tick += MonitorTimer_Tick;
            
            // 设置窗体大小和标题
            this.Text = "服务监控工具";
            this.Size = new System.Drawing.Size(500, 400);
            
            // 添加监控状态标签
            statusLabel.Text = "监控状态: 未开启";
            
            // 为开关按钮添加事件处理
            toggleButton.Click += ToggleButton_Click;
        }

        private async void MonitorTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                // 请求服务状态API
                var response = await httpClient.GetStringAsync("https://ff14act.web.sdo.com/api/serverStatus/getServerStatus");
                
                // 解析JSON响应
                using var jsonDoc = JsonDocument.Parse(response);
                var root = jsonDoc.RootElement;
                
                bool anyServerRunning = false;
                
                // 检查所有区域的所有服务器
                foreach (var area in root.GetProperty("Data").EnumerateArray())
                {
                    foreach (var group in area.GetProperty("Group").EnumerateArray())
                    {
                        if (group.GetProperty("runing").GetBoolean())
                        {
                            anyServerRunning = true;
                            logListBox.Items.Insert(0, $"[{DateTime.Now}] {area.GetProperty("AreaName").GetString()} - {group.GetProperty("name").GetString()} 服务正在运行!");
                            break;
                        }
                    }
                    
                    if (anyServerRunning) break;
                }
                
                // 如果有任何服务器运行，播放提示音
                if (anyServerRunning)
                {
                    alertSound.Play();
                }
            }
            catch (Exception ex)
            {
                logListBox.Items.Insert(0, $"[{DateTime.Now}] 错误: {ex.Message}");
            }
        }

        private void ToggleButton_Click(object sender, EventArgs e)
        {
            isMonitoring = !isMonitoring;
            
            if (isMonitoring)
            {
                // 开启监控
                monitorTimer.Start();
                toggleButton.Text = "停止监控";
                statusLabel.Text = "监控状态: 已开启";
                logListBox.Items.Insert(0, $"[{DateTime.Now}] 开始监控服务器状态");
            }
            else
            {
                // 停止监控
                monitorTimer.Stop();
                toggleButton.Text = "开始监控";
                statusLabel.Text = "监控状态: 未开启";
                logListBox.Items.Insert(0, $"[{DateTime.Now}] 停止监控服务器状态");
            }
        }
    }
}
